
import type { RoadmapStep, Lesson, Exercise, DictionaryTerm, Achievement, UserProfile, Module, ExerciseOption } from './types';
// √çcones Lucide que AINDA S√ÉO USADOS em outros lugares (ex: Achievements fallback, ExerciseView feedback)
// ou √≠cones funcionais que decidimos manter.
// √çcones que eram S√ì para exerciseCategories foram removidos da importa√ß√£o.
import { 
    Zap, Target, BookOpen, CheckCircle, Link2, Shuffle, MousePointerSquareDashed, Type, Trophy, Award, 
    ListOrdered, Code, Puzzle, // Estes eram para exerciseCategories, agora s√£o emojis. Se n√£o usados em outro lugar, poderiam ser removidos.
    UsersRound, PersonStanding, ToyBrick, Brain, Microscope, BarChart3, FileText, Scale, Landmark, Accessibility, GraduationCap, HelpingHand, 
    PackageSearch, Home, Loader2 
} from 'lucide-react';
import type { LucideIcon } from 'lucide-react';

// Importa√ß√µes dos arquivos de dados modulares
import { mockUserProfile as userProfileData } from './data/userProfile';
import { mockDictionaryTerms as dictionaryData } from './data/dictionary';
import { mockAchievements as achievementsData } from './data/achievements';

import { module1Lessons } from './data/module1Data';
import { module1Exercises } from './data/exercises/module1'; 

import { module2Lessons } from './data/module2Data';
import { module2Exercises } from './data/exercises/module2';

import { module3Lessons } from './data/module3Data';
import { module3Exercises } from './data/exercises/module3';

import { module4Lessons } from './data/module4Data';
import { module4Exercises } from './data/exercises/module4';

import { module5Lessons } from './data/module5Data';
import { module5Exercises } from './data/exercises/module5'; 

import { module6Lessons } from './data/module6Data';
import { module6Exercises } from './data/exercises/module6';

import { module7Lessons } from './data/module7Data';
import { module7Exercises } from './data/exercises/module7';

import { module8Lessons } from './data/module8Data';
import { module8Exercises } from './data/exercises/module8'; 

import { module9Lessons } from './data/module9Data';
import { module9Exercises } from './data/exercises/module9'; 

import { module10Lessons } from './data/module10Data';
import { module10Exercises } from './data/exercises/module10';

import { module11Lessons } from './data/module11Data'; 
import { module11Exercises } from './data/exercises/module11'; 

import { module12Lessons } from './data/module12Data';
import { module12Exercises } from './data/exercises/module12';


// Re-exportar os dados importados para que o resto do aplicativo possa acess√°-los
export const mockUserProfile: UserProfile = userProfileData;
export const mockDictionaryTerms: DictionaryTerm[] = dictionaryData;
export const mockAchievements: Achievement[] = achievementsData;


// --- Trilhas de Conhecimento (Roadmap Steps) ---
export const mockRoadmapData: RoadmapStep[] = [
  {
    id: 'trilha1',
    title: 'Desenvolvimento F√≠sico, Cognitivo, Social e Afetivo de crian√ßas e adolescentes com defici√™ncia.',
    order: 1,
    emoji: 'üßí', 
    description: 'Explore o desenvolvimento integral de crian√ßas e adolescentes com defici√™ncia em suas m√∫ltiplas dimens√µes: f√≠sica, cognitiva, social e afetiva, e as interven√ß√µes que promovem seu bem-estar e inclus√£o.',
    modules: [{
      id: 'mod-trilha1-0',
      title: 'Compreendendo o Desenvolvimento Infanto-Juvenil com Defici√™ncia',
      order: 1,
      lessons: module1Lessons,
      exercises: module1Exercises, 
      isCompleted: false, 
      progress: 0, 
    }],
    isCompleted: false, 
    isCurrent: false, 
  },
  {
    id: 'trilha2',
    title: 'Pessoas Adultas com Defici√™ncia: Desenvolvimento, Direitos e Perspectivas.',
    order: 2,
    emoji: 'üë§', 
    description: 'Compreenda as particularidades do desenvolvimento de adultos e idosos com defici√™ncia, abordando aspectos f√≠sicos, cognitivos, sociais e afetivos ao longo do envelhecimento.',
    modules: [{
      id: 'mod-trilha2-0',
      title: 'A Pessoa Adulta com Defici√™ncia: Trajet√≥rias e Desafios',
      order: 2,
      lessons: module2Lessons,
      exercises: module2Exercises,
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha3',
    title: 'Modelos de interven√ß√£o para o favorecimento do desenvolvimento de pessoas com defici√™ncia.',
    order: 3,
    emoji: 'üß©', 
    description: 'Conhe√ßa e analise diferentes modelos de interven√ß√£o que visam promover o desenvolvimento e a inclus√£o de pessoas com defici√™ncia em diversos contextos.',
    modules: [{
      id: 'mod-trilha3-0',
      title: 'Explorando Modelos de Interven√ß√£o em Defici√™ncia',
      order: 3,
      lessons: module3Lessons, 
      exercises: module3Exercises, 
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha4',
    title: 'Principais abordagens te√≥ricas relativas ao desenvolvimento da pessoa com defici√™ncia.',
    order: 4,
    emoji: 'üìö', 
    description: 'Aprofunde-se nas principais teorias que fundamentam a compreens√£o do desenvolvimento de pessoas com defici√™ncia, desde perspectivas cl√°ssicas at√© contempor√¢neas.',
    modules: [{
      id: 'mod-trilha4-0',
      title: 'Fundamentos Te√≥ricos do Desenvolvimento na Defici√™ncia',
      order: 4,
      lessons: module4Lessons,
      exercises: module4Exercises,
      isCompleted: false, 
      progress: 0,    
    }],
    isCompleted: false, 
    isCurrent: false, 
  },
  {
    id: 'trilha5',
    title: 'Contribui√ß√µes da neuropsicologia para a compreens√£o dos fen√¥menos desenvolvimentais da Pessoa com Defici√™ncia.',
    order: 5,
    emoji: 'üß†', 
    description: 'Descubra como a neuropsicologia contribui para entender os processos de desenvolvimento, as fun√ß√µes cognitivas e os comportamentos em pessoas com defici√™ncia.',
    modules: [{
      id: 'mod-trilha5-0',
      title: 'Neuropsicologia Aplicada √† Defici√™ncia: Compreens√£o e Interven√ß√£o',
      order: 5,
      lessons: module5Lessons, 
      exercises: module5Exercises, 
      isCompleted: false,
      progress: 0,     
    }],
    isCompleted: false, 
    isCurrent: false,  
  },
  {
    id: 'trilha6',
    title: 'Fundamentos da Avalia√ß√£o Psicol√≥gica e do Psicodiagn√≥stico da pessoa com defici√™ncia.',
    order: 6,
    emoji: 'üìä', 
    description: 'Estude os fundamentos da avalia√ß√£o psicol√≥gica e do psicodiagn√≥stico aplicados a pessoas com defici√™ncia, considerando suas especificidades, instrumentos e √©tica.',
    modules: [{
      id: 'mod-trilha6-0',
      title: 'Avalia√ß√£o Psicol√≥gica e Psicodiagn√≥stico em Pessoas com Defici√™ncia',
      order: 6,
      lessons: module6Lessons, 
      exercises: module6Exercises, 
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false, 
  },
  {
    id: 'trilha7',
    title: 'Pesquisa com Pessoas com Defici√™ncia: T√≥picos, M√©todos e √âtica.',
    order: 7,
    emoji: 'üìù', 
    description: 'Explore temas de pesquisa, m√©todos de coleta e an√°lise de dados (qualitativos, quantitativos e mistos), e as considera√ß√µes √©ticas envolvidas na investiga√ß√£o cient√≠fica sobre defici√™ncia.',
    modules: [{
      id: 'mod-trilha7-0',
      title: 'Pesquisa Cient√≠fica em Defici√™ncia: M√©todos e √âtica',
      order: 7,
      lessons: module7Lessons,
      exercises: module7Exercises,
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha8',
    title: 'Implica√ß√µes √©ticas da avalia√ß√£o e interven√ß√£o com pessoas com defici√™ncia.',
    order: 8,
    emoji: '‚öñÔ∏è', 
    description: 'Analise as implica√ß√µes √©ticas relacionadas √† avalia√ß√£o e interven√ß√£o junto a pessoas com defici√™ncia, promovendo pr√°ticas respons√°veis e respeitosas.',
    modules: [{
      id: 'mod-trilha8-0',
      title: '√âtica Profissional na Atua√ß√£o com Pessoas com Defici√™ncia',
      order: 8,
      lessons: module8Lessons,
      exercises: module8Exercises, 
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha9',
    title: 'Pol√≠ticas e Processos de inclus√£o da pessoa com defici√™ncia nos contextos educacionais, laborais e sociais.',
    order: 9,
    emoji: 'üèõÔ∏è', 
    description: 'Conhe√ßa as pol√≠ticas e os processos que visam a inclus√£o de pessoas com defici√™ncia em diversos contextos, como educa√ß√£o, trabalho e sociedade.',
    modules: [{
      id: 'mod-trilha9-0',
      title: 'Pol√≠ticas e Pr√°ticas de Inclus√£o: Educa√ß√£o, Trabalho e Sociedade',
      order: 9,
      lessons: module9Lessons,
      exercises: module9Exercises, 
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha10',
    title: 'Debates contempor√¢neos sobre processos de inclus√£o: desenho universal, neurodiverg√™ncias, tecnologias assistivas e defici√™ncia oculta.',
    order: 10,
    emoji: 'üåà', 
    description: 'Participe de debates atuais sobre inclus√£o, abordando temas como desenho universal, neurodiverg√™ncia, tecnologias assistivas e defici√™ncias ocultas.',
    modules: [{
      id: 'mod-trilha10-0',
      title: 'Temas Emergentes em Inclus√£o, Acessibilidade e Neurodiversidade',
      order: 10,
      lessons: module10Lessons,
      exercises: module10Exercises, 
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha11',
    title: 'Acesso, perman√™ncia e participa√ß√£o de pessoas com defici√™ncia no Ensino Superior.',
    order: 11,
    emoji: 'üéì', 
    description: 'Discuta os desafios e os progressos relacionados ao acesso, perman√™ncia e participa√ß√£o de pessoas com defici√™ncia no ensino superior.',
    modules: [{
      id: 'mod-trilha11-0',
      title: 'Inclus√£o e Acessibilidade no Contexto do Ensino Superior',
      order: 11,
      lessons: module11Lessons, 
      exercises: module11Exercises, 
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  },
  {
    id: 'trilha12',
    title: 'Envelhecimento humano, funcionalidade, autonomia e qualidade de vida de pessoas idosas com defici√™ncia e combate ao etarismo.',
    order: 12,
    emoji: 'üßë‚Äçü¶≥', 
    description: 'Aborde o envelhecimento humano, funcionalidade, autonomia, qualidade de vida de pessoas idosas (incluindo aquelas com defici√™ncia) e estrat√©gias de combate ao etarismo.',
    modules: [{
      id: 'mod-trilha12-0',
      title: 'Envelhecimento, Defici√™ncia, Direitos e Combate ao Etarismo',
      order: 12,
      lessons: module12Lessons,
      exercises: module12Exercises,
      isCompleted: false,
      progress: 0,
    }],
    isCompleted: false,
    isCurrent: false,
  }
];

// --- Consolidar todos os dados e atualizar estados ---

const allModuleLessonsAggregated = mockRoadmapData.reduce((acc, step) => {
  step.modules.forEach(mod => {
    if (mod.lessons && Array.isArray(mod.lessons)) {
      // Adiciona moduleId e trilhaId a cada li√ß√£o
      const lessonsWithContext = mod.lessons.map(lesson => ({
        ...lesson,
        moduleId: mod.id, 
        moduleTitle: mod.title, 
        trilhaId: step.id,
      }));
      acc.push(...lessonsWithContext);
    }
  });
  return acc;
}, [] as Lesson[]);


const allModuleExercisesAggregated = mockRoadmapData.reduce((acc, step) => {
  step.modules.forEach(mod => {
    if (mod.exercises && Array.isArray(mod.exercises)) {
      acc.push(...mod.exercises);
    }
  });
  return acc;
}, [] as Exercise[]);

export const mockLessons: Lesson[] = [...new Map(allModuleLessonsAggregated.map(item => [item.id, item])).values()];
export const mockExercises: Exercise[] = [...new Map(allModuleExercisesAggregated.map(item => [item.id, item])).values()];
export const mockModules: Module[] = mockRoadmapData.flatMap(step => step.modules);


// --- Categorias de Li√ß√µes e Exerc√≠cios ---
// As `lessonCategories` j√° s√£o din√¢micas e usam o emoji da trilha.
export const finalLessonCategories: { name: string; emoji: string; lessons: Lesson[]; moduleId: string;}[] = mockRoadmapData.reduce((acc, roadmap) => {
  if (roadmap.modules && roadmap.modules.length > 0) {
    const allLessonsInRoadmap = roadmap.modules.flatMap(mod => 
        mod.lessons.map(lesson => ({
            ...lesson,
            moduleId: mod.id, 
            moduleTitle: mod.title, 
            trilhaId: roadmap.id,
        }))
    );
    if (allLessonsInRoadmap.length > 0) {
      acc.push({
        name: roadmap.modules[0].title || `Trilha ${roadmap.order}`, 
        emoji: roadmap.emoji || "üìö", 
        lessons: [...new Map(allLessonsInRoadmap.map(item => [item.id, item])).values()],
        moduleId: roadmap.modules[0].id || roadmap.id, 
      });
    }
  }
  return acc;
}, [] as { name: string; emoji: string; lessons: Lesson[]; moduleId: string; }[]);


const allCategorizedLessonIds = new Set(finalLessonCategories.flatMap(cat => cat.lessons.map(l => l.id)));
const uncategorizedLessons = mockLessons.filter(l => !allCategorizedLessonIds.has(l.id));
if (uncategorizedLessons.length > 0) {
  const geralCategory = finalLessonCategories.find(cat => cat.moduleId === "geral-outros");
  if (geralCategory) {
    geralCategory.lessons.push(...uncategorizedLessons);
    geralCategory.lessons = [...new Map(geralCategory.lessons.map(item => [item.id, item])).values()];
  } else {
    finalLessonCategories.push({
      name: "Geral/Outros",
      emoji: "üì¶", 
      lessons: [...new Map(uncategorizedLessons.map(item => [item.id, item])).values()],
      moduleId: "geral-outros"
    });
  }
}

// ATUALIZA√á√ÉO AQUI: exerciseCategories agora usa 'emoji' em vez de 'icon'
export const exerciseCategories: { name: string; emoji: string; exercises: Exercise[] }[] = [
  { name: "M√∫ltipla Escolha", emoji: 'üîò', exercises: mockExercises.filter(e => e.type === 'multiple-choice') },
  { name: "Preencher Lacunas", emoji: '‚úçÔ∏è', exercises: mockExercises.filter(e => e.type === 'fill-in-the-blank') },
  { name: "Associa√ß√£o", emoji: 'üîó', exercises: mockExercises.filter(e => e.type === 'association') },
  { name: "Ordena√ß√£o", emoji: 'üî¢', exercises: mockExercises.filter(e => e.type === 'ordering') },
  { name: "Categoriza√ß√£o (Drag & Drop)", emoji: 'üñêÔ∏è', exercises: mockExercises.filter(e => e.type === 'drag-and-drop') },
  { name: "Estudo de Caso/An√°lise", emoji: 'üßê', exercises: [] }, // Emoji para estudo de caso
  { name: "Programa√ß√£o (Placeholder)", emoji: 'üíª', exercises: mockExercises.filter(e => e.type === 'coding') },
  { name: "Outros Tipos", emoji: 'üß©', exercises: mockExercises.filter(e => !['multiple-choice', 'fill-in-the-blank', 'association', 'ordering', 'drag-and-drop', 'coding'].includes(e.type))},
];

exerciseCategories.forEach(cat => cat.exercises = [...new Map(cat.exercises.map(item => [item.id, item])).values()]);

const allCategorizedExerciseIds = new Set(exerciseCategories.flatMap(cat => cat.exercises.map(e => e.id)));
const uncategorizedExercises = mockExercises.filter(e => !allCategorizedExerciseIds.has(e.id));
const outrosExercisesCategory = exerciseCategories.find(cat => cat.name === "Outros Tipos");
if (outrosExercisesCategory && uncategorizedExercises.length > 0) {
  outrosExercisesCategory.exercises.push(...uncategorizedExercises);
  outrosExercisesCategory.exercises = [...new Map(outrosExercisesCategory.exercises.map(item => [item.id, item])).values()];
}

mockUserProfile.completedLessons = [...new Set(mockUserProfile.completedLessons)];
mockUserProfile.completedExercises = [...new Set(mockUserProfile.completedExercises)];
mockUserProfile.completedModules = [...new Set(mockUserProfile.completedModules)];

let firstUncompletedTrilhaFound = false;
mockRoadmapData.forEach((trilha) => {
  let allModulesInTrilhaCompleted = true;
  if (trilha.modules && trilha.modules.length > 0) {
    trilha.modules.forEach(module => {
      const totalModuleLessons = module.lessons ? module.lessons.length : 0;
      const completedModuleLessons = module.lessons ? module.lessons.filter(l => mockUserProfile.completedLessons.includes(l.id)).length : 0;
      
      const exercisesForThisModule = mockExercises.filter(ex => ex.moduleId === module.id);
      const totalModuleExercises = exercisesForThisModule.length;
      const completedModuleExercises = exercisesForThisModule.filter(e => mockUserProfile.completedExercises.includes(e.id)).length;
      
      const totalModuleItems = totalModuleLessons + totalModuleExercises;
      const completedModuleItems = completedModuleLessons + completedModuleExercises;

      module.progress = totalModuleItems > 0 ? Math.round((completedModuleItems / totalModuleItems) * 100) : 0;
      
      if (totalModuleItems > 0) {
        module.isCompleted = mockUserProfile.completedModules.includes(module.id) || module.progress === 100;
         if (module.isCompleted && !mockUserProfile.completedModules.includes(module.id)) {
            // Se o progresso √© 100 mas n√£o est√° no perfil, pode ser um bom lugar para atualizar o perfil
            // No entanto, essa l√≥gica de atualiza√ß√£o de perfil √© melhor no AuthContext ou actions.
            // Aqui, apenas refletimos o que *poderia* ser o estado.
         }
      } else {
        module.isCompleted = mockUserProfile.completedModules.includes(module.id);
      }
      
      if (!module.isCompleted) {
        allModulesInTrilhaCompleted = false;
      }
    });
    trilha.isCompleted = allModulesInTrilhaCompleted;
  } else {
    trilha.isCompleted = false; 
  }

  if (!trilha.isCompleted && !firstUncompletedTrilhaFound) {
      trilha.isCurrent = true;
      firstUncompletedTrilhaFound = true;
  } else {
      trilha.isCurrent = false;
  }
});

if (mockRoadmapData.length > 0 && mockRoadmapData.every(t => t.isCompleted)) {
    mockRoadmapData.forEach(t => t.isCurrent = false); 
    // Opcional: marcar a √∫ltima como atual se todas estiverem completas
    // mockRoadmapData[mockRoadmapData.length - 1].isCurrent = true;
} else if (!firstUncompletedTrilhaFound && mockRoadmapData.length > 0) { 
    const firstNotDone = mockRoadmapData.find(t => !t.isCompleted);
    if (firstNotDone) {
        firstNotDone.isCurrent = true;
    } else {
        // Se todas est√£o completas (caso j√° coberto acima) ou se n√£o h√° nenhuma n√£o completa (improv√°vel se !firstUncompletedTrilhaFound)
        // Apenas como um fallback se a l√≥gica acima n√£o pegar todos os casos:
        if (mockRoadmapData.length > 0 && !mockRoadmapData.some(t => t.isCurrent)) {
             mockRoadmapData[0].isCurrent = true; // Garante que pelo menos uma seja atual se nenhuma foi marcada
        }
    }
}

    